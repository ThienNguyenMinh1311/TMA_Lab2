import re
from fastapi import APIRouter, Request, Depends, HTTPException, Form, UploadFile
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from jose import jwt, JWTError
from fastapi.templating import Jinja2Templates
from pathlib import Path
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
from app.auth import get_current_user
from app.config import MONGODB_URI, SECRET_KEY, ALGORITHM, ANYTHING_API_BASE, ANYTHING_API_KEY
from app.anythingllm_api import (
    get_chatbot_history,
    chat,
    upload_document_to_workspace,
    new_thread
)
import requests

def connect_to_mongodb():
    try:
        client = MongoClient(MONGODB_URI, serverSelectionTimeoutMS=5000)
        client.admin.command('ping')  # Test connection
        db = client['mydatabase']
        return db
    except ConnectionFailure as e:
        raise Exception(f"Failed to connect to MongoDB: {e}")
    except Exception as e:
        raise Exception(f"An error occurred: {e}")

# Initialize MongoDB
db = connect_to_mongodb()

templates = Jinja2Templates(directory="templates")

router = APIRouter(prefix="/lawyer", tags=["Lawyer Dashboard"])

DATASET_DIR = Path("./app/dataset/")

# ----------------- DASHBOARD -----------------
@router.get("/dashboard", response_class=HTMLResponse)
async def lawyer_dashboard(request: Request, current_user: dict = Depends(get_current_user)):
    username = current_user["username"]
    return templates.TemplateResponse("lawyer_dashboard.html", {"request": request, "username": username})

# ----------------- T√ÄI LI·ªÜU -----------------
@router.get("/documents", response_class=JSONResponse)
async def get_lawyer_documents(current_user: dict = Depends(get_current_user)):
    """
    Tr·∫£ danh s√°ch t√†i li·ªáu m√† user c√≥ quy·ªÅn truy c·∫≠p (theo 'access' trong MongoDB)
    """
    print("‚úÖ current_user:", current_user)

    allowed_docs = current_user.get("access", [])
    available_docs = []

    for doc_name in allowed_docs:
        file_path = DATASET_DIR / doc_name
        if file_path.exists():
            available_docs.append(doc_name)

    return JSONResponse({"documents": available_docs})

# ----------------- üí¨ CHATBOT -----------------
@router.get("/chatbot", response_class=HTMLResponse)
async def chatbot_page(request: Request, current_user: dict = Depends(get_current_user)):
    """
    Hi·ªÉn th·ªã giao di·ªán chatbot, c√≥ th·ªÉ t·∫°o thread m·ªõi ho·∫∑c upload t√†i li·ªáu
    """
    username = current_user["username"]
    return templates.TemplateResponse("chatbot.html", {"request": request, "username": username})


# ----------------- üì¢ T·∫†O THREAD M·ªöI -----------------
@router.post("/chatbot/new-thread")
async def create_new_thread(current_user: dict = Depends(get_current_user)):
    """
    G·ªçi AnythingLLM API ƒë·ªÉ t·∫°o thread m·ªõi
    """
    try:
        response = new_thread(workspace="test")  # workspace c√≥ th·ªÉ ƒë·ªïi theo user
        if "thread_id" not in response:
            raise HTTPException(status_code=400, detail="Kh√¥ng t·∫°o ƒë∆∞·ª£c thread m·ªõi.")
        return JSONResponse({"message": "T·∫°o thread m·ªõi th√†nh c√¥ng", "thread_id": response["thread_id"]})
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói khi t·∫°o thread m·ªõi: {e}")


# ----------------- üìÑ T·∫¢I T√ÄI LI·ªÜU -----------------
@router.post("/chatbot/upload-doc")
async def upload_doc_to_workspace(file: UploadFile, current_user: dict = Depends(get_current_user)):
    """
    Upload t√†i li·ªáu v√†o workspace trong AnythingLLM
    """
    try:
        result = upload_document_to_workspace("test", file)
        return JSONResponse({"message": "T·∫£i t√†i li·ªáu th√†nh c√¥ng", "result": result})
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói khi t·∫£i t√†i li·ªáu: {e}")


# ----------------- üí≠ G·ª¨I TIN NH·∫ÆN CHATBOT -----------------
@router.post("/chatbot/send-message")
async def send_chat_message(request: Request, current_user: dict = Depends(get_current_user)):
    """
    G·ª≠i tin nh·∫Øn t·ªõi chatbot v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi
    """
    data = await request.json()
    message = data.get("message")
    if not message:
        raise HTTPException(status_code=400, detail="Tin nh·∫Øn tr·ªëng")

    try:
        reply = chat(workspace="test", thread_id="default", message=message)
        return JSONResponse({"reply": reply})
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói khi g·ª≠i tin nh·∫Øn: {e}")


# ----------------- üïì L·ªäCH S·ª¨ TR√í CHUY·ªÜN -----------------
@router.get("/chatbot/history", response_class=JSONResponse)
async def get_chat_history(current_user: dict = Depends(get_current_user)):
    """
    L·∫•y l·ªãch s·ª≠ tr√≤ chuy·ªán t·ª´ AnythingLLM ƒë·ªÉ hi·ªÉn th·ªã giao di·ªán chat
    """
    try:
        history = get_chatbot_history(workspace="test", thread_id="default")
        return JSONResponse({"history": history})
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói khi l·∫•y l·ªãch s·ª≠ tr√≤ chuy·ªán: {e}")
