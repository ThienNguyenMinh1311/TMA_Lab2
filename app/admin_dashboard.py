from fastapi import APIRouter, HTTPException, Request, UploadFile, Form
from fastapi.responses import JSONResponse, HTMLResponse, RedirectResponse 
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi import UploadFile, File
import shutil
import os
import requests
from pathlib import Path
from typing import List, Optional
import os
from .users_db import get_hashed as get_hashed_password
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, DuplicateKeyError

router = APIRouter(prefix="/admin", tags=["Admin Dashboard"])

# =========================
# ‚öôÔ∏è MongoDB Setup
# =========================
MONGODB_URI = "mongodb+srv://tian_ng:matkhau@tiandata.uovixjo.mongodb.net/"

def connect_to_mongodb():
    try:
        client = MongoClient(MONGODB_URI, serverSelectionTimeoutMS=5000)
        client.admin.command("ping")
        db = client["mydatabase"]
        return db
    except ConnectionFailure as e:
        raise Exception(f"Failed to connect to MongoDB: {e}")
    except Exception as e:
        raise Exception(f"An error occurred: {e}")

db = connect_to_mongodb()
users_collection = db["users"]

# =========================
# üìÅ Templates & dataset
# =========================
templates = Jinja2Templates(directory="./app/templates")
DATASET_DIR = Path("./app/dataset")
DATASET_DIR.mkdir(exist_ok=True, parents=True)

# =========================
# üë§ QU·∫¢N L√ù NH√ÇN VI√äN
# =========================

@router.get("/users")
def get_users():
    """L·∫•y danh s√°ch to√†n b·ªô ng∆∞·ªùi d√πng"""
    users = [
        {
            "username": user["username"],
            "role": user.get("role", "lawyer"),
            "access": user.get("access", []),
        }
        for user in users_collection.find()
    ]
    return JSONResponse({"users": users})


@router.post("/users")
async def add_user(request: Request):
    """Th√™m ng∆∞·ªùi d√πng m·ªõi"""
    data = await request.json()
    username = data.get("username")
    password = data.get("password")
    role = data.get("role", "lawyer")
    access = data.get("access", [])

    if not username or not password:
        raise HTTPException(status_code=400, detail="Missing username or password")

    # Ki·ªÉm tra tr√πng username
    if users_collection.find_one({"username": username}):
        raise HTTPException(status_code=400, detail="User already exists")

    # T·∫°o ng∆∞·ªùi d√πng m·ªõi
    new_user = {
        "username": username,
        "hashed_password": get_hashed_password(password),
        "role": role,
        "access": access,
    }

    users_collection.insert_one(new_user)
    return JSONResponse({"message": f"User '{username}' added successfully."})


@router.put("/users/{username}")
async def update_user(username: str, request: Request):
    """
    C·∫≠p nh·∫≠t th√¥ng tin user (role, password, access/documents).
    Body JSON c√≥ th·ªÉ g·ªìm:
    {
        "role": "lawyer" ho·∫∑c "admin",
        "password": "newpass" (t√πy ch·ªçn),
        "documents": ["case_1", "case_2"]
    }
    """
    data = await request.json()
    print("üì© DATA NH·∫¨N ƒê∆Ø·ª¢C:", data)

    role = data.get("role")
    password = data.get("password")
    documents = data.get("documents")  # ‚Üê Giao di·ªán g·ª≠i l√™n l√† 'documents', kh√¥ng ph·∫£i 'access'

    users_collection = db["users"]
    user = users_collection.find_one({"username": username})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    update_data = {}

    # role
    if role and role != user.get("role"):
        update_data["role"] = role

    # password
    if password:
        update_data["hashed_password"] = get_hashed_password(password)

    # documents ‚Üí access
    if documents is not None:
        # l·ªçc chu·ªói tr·∫Øng, lo·∫°i k√Ω t·ª± th·ª´a
        access_clean = [x.strip().strip('"').strip("'") for x in documents if x.strip()]
        update_data["access"] = access_clean
        print("‚úÖ ACCESS PARSED:", access_clean)

    if not update_data:
        raise HTTPException(status_code=400, detail="No valid fields to update")

    result = users_collection.update_one({"username": username}, {"$set": update_data})
    print("üß© K·∫æT QU·∫¢ UPDATE:", result.raw_result)

    if result.modified_count == 0:
        return JSONResponse({"message": f"No changes made for '{username}'."})

    return JSONResponse({"message": f"User '{username}' updated successfully."})



@router.delete("/users/{username}")
def delete_user(username: str):
    """X√≥a ng∆∞·ªùi d√πng (tr·ª´ admin)"""
    user = users_collection.find_one({"username": username})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    if user.get("role") == "admin":
        raise HTTPException(status_code=403, detail="Cannot delete admin user")

    users_collection.delete_one({"username": username})
    return JSONResponse({"message": f"User '{username}' deleted successfully."})

# =========================
# üîπ QU·∫¢N L√ù T√ÄI LI·ªÜU LOCAL
# =========================

@router.get("/documents")
async def list_documents():
    files = [f.name for f in DATASET_DIR.iterdir() if f.is_file()]
    return JSONResponse({"documents": files})


@router.post("/documents/upload")
async def upload_documents(files: List[UploadFile] = File(...)):
    uploaded_files = []
    for file in files:
        dest_path = DATASET_DIR / file.filename
        with open(dest_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        uploaded_files.append(file.filename)
    return JSONResponse({"message": "Upload th√†nh c√¥ng", "uploaded": uploaded_files})


@router.delete("/documents/{filename}")
async def delete_document(filename: str):
    file_path = DATASET_DIR / filename
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="File not found")

    os.remove(file_path)
    return JSONResponse({"message": f"File '{filename}' deleted successfully."})

# ==============================
# üîπ AnythingLLM Configuration
# ==============================

ANYTHING_API_KEY = "TE1BT2R-STZ4HK4-K8EGEY7-DVY0KDG"
ANYTHING_API_BASE = "http://localhost:3001/api/v1"

HEADERS_JSON = {
    "Authorization": f"Bearer {ANYTHING_API_KEY}",
    "Content-Type": "application/json",
    "accept": "application/json",
}

HEADERS_UPLOAD = {
    "Authorization": f"Bearer {ANYTHING_API_KEY}",
    "accept": "application/json",
}

# ====== ƒê∆∞·ªùng d·∫´n dataset ======
DATASET_DIR = "./app/dataset"


@router.post("/create-workspace/{username}")
def create_workspace(username: str):
    """
    ‚úÖ Khi admin nh·∫•n "T·∫°o Workspace"
    1Ô∏è‚É£ G·ªçi AnythingLLM API ƒë·ªÉ t·∫°o workspace <username>_workspace
    2Ô∏è‚É£ T·ª± ƒë·ªông embed t·∫•t c·∫£ file trong access c·ªßa user
    """
    # üîπ B∆∞·ªõc 1: L·∫•y th√¥ng tin user t·ª´ MongoDB
    user = users_collection.find_one({"username": username})
    if not user:
        raise HTTPException(status_code=404, detail=f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng {username}")

    workspace_name = f"{username}_workspace"

    # üîπ B∆∞·ªõc 2: T·∫°o workspace trong AnythingLLM
    create_url = f"{ANYTHING_API_BASE}/workspace/new"
    payload = {"name": workspace_name}

    try:
        res = requests.post(create_url, headers=HEADERS_JSON, json=payload)
        if res.status_code != 200:
            raise HTTPException(status_code=res.status_code, detail=f"L·ªói t·∫°o workspace: {res.text}")

        data = res.json()
        print(f"‚úÖ Workspace created: {data}")

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói khi g·ªçi AnythingLLM API: {e}")

    # üîπ B∆∞·ªõc 3: Embed c√°c file access c·ªßa user
    access_files = user.get("access", [])
    failed_files = []

    for filename in access_files:
        file_path = os.path.join(DATASET_DIR, filename)
        if not os.path.exists(file_path):
            failed_files.append(filename)
            continue

        upload_url = f"{ANYTHING_API_BASE}/document/upload/custom-documents"

        files = {
            "file": (filename, open(file_path, "rb"), "text/plain")
        }
        data_upload = {
            "addToWorkspaces": workspace_name,
            "metadata": ""
        }

        try:
            upload_res = requests.post(upload_url, headers=HEADERS_UPLOAD, files=files, data=data_upload)
            if upload_res.status_code != 200:
                failed_files.append(filename)
            else:
                print(f"üìÑ Uploaded {filename} -> {workspace_name}")

        except Exception as e:
            print(f"‚ùå L·ªói upload {filename}: {e}")
            failed_files.append(filename)

    return {
        "message": f"Workspace '{workspace_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
        "workspace": {"slug": workspace_name},
        "failed_files": failed_files
    }