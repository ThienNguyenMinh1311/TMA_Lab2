const API_BASE = "http://localhost:8000/admin"; // ƒê·ªïi n·∫øu b·∫°n deploy server kh√°c
let users = [];
let documents = [];
let currentEditUser = null;

// =============================
// üîπ HI·ªÇN TH·ªä GIAO DI·ªÜN
// =============================
function showSection(section) {
  document.querySelectorAll("section").forEach((s) => (s.style.display = "none"));
  document.getElementById(`${section}-section`).style.display = "block";

  if (section === "lawyer") loadUsers();
  else if (section === "document") loadDocuments();
}

// =============================
// üîπ QU·∫¢N L√ù LU·∫¨T S∆Ø
// =============================
async function loadUsers() {
  try {
    const res = await fetch(`${API_BASE}/users`);
    const data = await res.json();
    users = data.users || [];
    renderUserTable();
  } catch (err) {
    console.error("L·ªói t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", err);
    alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng!");
  }
}

function renderUserTable() {
  const tbody = document.getElementById("lawyer-table");
  tbody.innerHTML = "";

  users.forEach((user) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${user.username}</td>
      <td>${user.role}</td>
      <td>${(user.access || []).join(", ") || "‚Äî"}</td>
      <td>
        <button onclick="openEditModal('${user.username}')">S·ª≠a</button>
        <button onclick="deleteUser('${user.username}')" ${user.role === "admin" ? "disabled" : ""}>X√≥a</button>
        <button onclick="createWorkspace('${user.username}')">üåê T·∫°o Workspace</button>
      </td>
    `;
    tbody.appendChild(tr);
  });
}

async function createWorkspace(username) {
  if (!confirm(`T·∫°o workspace cho ng∆∞·ªùi d√πng '${username}'?`)) return;

  try {
    const res = await fetch(`${API_BASE}/create-workspace/${username}`, {
      method: "POST",
    });

    const data = await res.json();
    if (!res.ok) throw new Error(data.detail || "T·∫°o workspace th·∫•t b·∫°i");

    alert(`‚úÖ ƒê√£ t·∫°o workspace cho ${username}!\nSlug: ${data.workspace?.slug || "N/A"}`);
    await loadUsers();
  } catch (err) {
    console.error("L·ªói t·∫°o workspace:", err);
    alert(`‚ùå L·ªói khi t·∫°o workspace cho ${username}!`);
  }
}


function showAddForm() {
  const modal = createModal("Th√™m lu·∫≠t s∆∞ m·ªõi", [
    { label: "T√™n t√†i kho·∫£n", id: "newUsername", type: "text" },
    { label: "M·∫≠t kh·∫©u", id: "newPassword", type: "password" },
    {
      label: "Vai tr√≤",
      id: "newRole",
      type: "select",
      options: ["lawyer", "admin"],
    },
    {
      label: "T√†i li·ªáu ƒë∆∞·ª£c truy c·∫≠p (ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y)",
      id: "newAccess",
      type: "text",
    },
  ]);

  const submitBtn = document.createElement("button");
  submitBtn.textContent = "Th√™m";
  submitBtn.onclick = addUser;
  modal.querySelector(".modal-content").appendChild(submitBtn);
  document.body.appendChild(modal);
}

async function addUser() {
  const username = document.getElementById("newUsername").value.trim();
  const password = document.getElementById("newPassword").value.trim();
  const role = document.getElementById("newRole").value;
  const accessText = document.getElementById("newAccess").value.trim();
  const access = accessText ? accessText.split(",").map((s) => s.trim()) : [];

  if (!username || !password) return alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");

  try {
    const res = await fetch(`${API_BASE}/users`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password, role, access }),
    });
    if (!res.ok) throw new Error("Th√™m ng∆∞·ªùi d√πng th·∫•t b·∫°i");
    alert("‚úÖ Th√™m lu·∫≠t s∆∞ th√†nh c√¥ng!");
    closeAllModals();
    await loadUsers();
  } catch (err) {
    alert("‚ùå L·ªói khi th√™m ng∆∞·ªùi d√πng!");
    console.error(err);
  }
}

function openEditModal(username) {
  const user = users.find((u) => u.username === username);
  if (!user) return;

  currentEditUser = user;
  const modal = createModal("S·ª≠a th√¥ng tin ng∆∞·ªùi d√πng", [
    { label: "T√™n t√†i kho·∫£n", id: "editUsername", type: "text", value: user.username, disabled: true },
    { label: "M·∫≠t kh·∫©u m·ªõi (n·∫øu mu·ªën thay ƒë·ªïi)", id: "editPassword", type: "password" },
    { label: "Vai tr√≤", id: "editRole", type: "select", options: ["lawyer", "admin"], value: user.role },
    {
      label: "T√†i li·ªáu ƒë∆∞·ª£c truy c·∫≠p (ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y)",
      id: "editAccess",
      type: "text",
      value: (user.access || []).join(", "),
    },
  ]);

  const saveBtn = document.createElement("button");
  saveBtn.textContent = "L∆∞u thay ƒë·ªïi";
  saveBtn.onclick = saveEdit;
  modal.querySelector(".modal-content").appendChild(saveBtn);
  document.body.appendChild(modal);
}

async function saveEdit() {
  const username = document.getElementById("editUsername").value;
  const password = document.getElementById("editPassword").value.trim();
  const role = document.getElementById("editRole").value;
  const accessText = document.getElementById("editAccess").value.trim();
  const documents = accessText ? accessText.split(",").map((s) => s.trim()) : [];

  try {
    const res = await fetch(`${API_BASE}/users/${username}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ password, role, documents }),
    });
    if (!res.ok) throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    alert("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
    closeAllModals();
    await loadUsers();
  } catch (err) {
    alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng!");
    console.error(err);
  }
}

async function deleteUser(username) {
  if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a '${username}' kh√¥ng?`)) return;

  try {
    const res = await fetch(`${API_BASE}/users/${username}`, { method: "DELETE" });
    if (!res.ok) throw new Error("X√≥a th·∫•t b·∫°i");
    alert("‚úÖ X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
    await loadUsers();
  } catch (err) {
    alert("‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng!");
    console.error(err);
  }
}

// =============================
// üîπ QU·∫¢N L√ù T√ÄI LI·ªÜU
// =============================
async function loadDocuments() {
  try {
    const res = await fetch(`${API_BASE}/documents`);
    if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch t√†i li·ªáu");
    const data = await res.json();

    const tbody = document.getElementById("document-table");
    tbody.innerHTML = "";

    if (!data.documents || data.documents.length === 0) {
      const tr = document.createElement("tr");
      tr.innerHTML = `<td colspan="2" style="text-align:center;">Kh√¥ng c√≥ t√†i li·ªáu n√†o</td>`;
      tbody.appendChild(tr);
      return;
    }

    data.documents.forEach((doc) => {
      const tr = document.createElement("tr");
      tr.innerHTML = `
        <td>${doc}</td>
        <td><button onclick="deleteDocument('${doc}')">üóëÔ∏è X√≥a</button></td>
      `;
      tbody.appendChild(tr);
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫£i t√†i li·ªáu:", err);
    alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch t√†i li·ªáu!");
  }
}

// =============================
// üîπ UPLOAD T√ÄI LI·ªÜU
// =============================
async function uploadDocuments() {
  const input = document.getElementById("documentFile");
  if (!input.files.length) {
    alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt file!");
    return;
  }

  const formData = new FormData();
  for (const file of input.files) {
    formData.append("files", file);
  }

  try {
    const res = await fetch(`${API_BASE.replace("/admin", "")}/admin/documents/upload`, {
      method: "POST",
      body: formData
    });
    if (!res.ok) throw new Error("Upload th·∫•t b·∫°i");
    alert("‚úÖ Upload th√†nh c√¥ng!");
    input.value = "";
    await loadDocuments();
  } catch (err) {
    console.error("L·ªói upload:", err);
    alert("‚ùå L·ªói khi t·∫£i l√™n t√†i li·ªáu!");
  }
}

// =============================
// üîπ X√ìA T√ÄI LI·ªÜU
// =============================
async function deleteDocument(filename) {
  if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a '${filename}' kh√¥ng?`)) return;

  try {
    const res = await fetch(`${API_BASE.replace("/admin", "")}/admin/documents/${filename}`, {
      method: "DELETE"
    });
    if (!res.ok) throw new Error("X√≥a th·∫•t b·∫°i");
    alert("üóëÔ∏è ƒê√£ x√≥a t√†i li·ªáu!");
    await loadDocuments();
  } catch (err) {
    console.error("L·ªói x√≥a t√†i li·ªáu:", err);
    alert("‚ùå L·ªói khi x√≥a t√†i li·ªáu!");
  }
}


// =============================
// üîπ MODAL D√ôNG CHUNG
// =============================
function createModal(title, fields) {
  closeAllModals();
  const modal = document.createElement("div");
  modal.className = "modal";
  modal.style.display = "flex";

  const content = document.createElement("div");
  content.className = "modal-content";

  const closeBtn = document.createElement("button");
  closeBtn.className = "close";
  closeBtn.textContent = "√ó";
  closeBtn.onclick = () => closeAllModals();

  const heading = document.createElement("h3");
  heading.textContent = title;

  content.appendChild(closeBtn);
  content.appendChild(heading);

  fields.forEach((f) => {
    const label = document.createElement("label");
    label.textContent = f.label;

    let input;
    if (f.type === "select") {
      input = document.createElement("select");
      f.options.forEach((opt) => {
        const option = document.createElement("option");
        option.value = opt;
        option.textContent = opt;
        if (f.value === opt) option.selected = true;
        input.appendChild(option);
      });
    } else {
      input = document.createElement("input");
      input.type = f.type;
      input.value = f.value || "";
    }

    input.id = f.id;
    if (f.disabled) input.disabled = true;

    content.appendChild(label);
    content.appendChild(input);
  });

  modal.appendChild(content);
  return modal;
}

function closeAllModals() {
  document.querySelectorAll(".modal").forEach((m) => m.remove());
}

// =============================
// üîπ KH·ªûI T·∫†O M·∫∂C ƒê·ªäNH
// =============================
window.onload = () => showSection("lawyer");
